name: RSVP Count Notification

on:
  schedule:
    # Run every Monday at 11:30 AM PT (18:30 UTC during standard time, 19:30 UTC during daylight saving time)
    # Using 18:30 UTC which will be 11:30 AM PT during standard time (winter) and 10:30 AM PT during DST
    - cron: '30 18 * * 1'
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  check-upcoming-meeting:
    runs-on: ubuntu-latest
    outputs:
      has_meeting: ${{ steps.check-meeting.outputs.has_meeting }}
      meeting_date: ${{ steps.check-meeting.outputs.meeting_date }}
      meeting_title: ${{ steps.check-meeting.outputs.meeting_title }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check for meeting this week
        id: check-meeting
        run: |
          # Get current date and end of week (Sunday)
          TODAY=$(date +%Y-%m-%d)
          END_OF_WEEK=$(date -d "next Sunday" +%Y-%m-%d)
          
          # Read presentations.json and look for meetings between today and Sunday
          MEETING_THIS_WEEK=$(node -e "
            const fs = require('fs');
            const presentations = JSON.parse(fs.readFileSync('./presentations.json', 'utf8'));
            const today = new Date('${TODAY}');
            const endOfWeek = new Date('${END_OF_WEEK}');
            
            const upcomingMeeting = presentations.find(p => {
              const meetingDate = new Date(p.date);
              return meetingDate >= today && meetingDate <= endOfWeek;
            });
            
            if (upcomingMeeting) {
              console.log('true');
              console.log(upcomingMeeting.date);
              console.log(upcomingMeeting.title);
            } else {
              console.log('false');
              console.log('');
              console.log('');
            }
          ")
          
          # Read the output lines
          HAS_MEETING=$(echo "$MEETING_THIS_WEEK" | sed -n '1p')
          MEETING_DATE=$(echo "$MEETING_THIS_WEEK" | sed -n '2p')
          MEETING_TITLE=$(echo "$MEETING_THIS_WEEK" | sed -n '3p')
          
          echo "has_meeting=$HAS_MEETING" >> $GITHUB_OUTPUT
          echo "meeting_date=$MEETING_DATE" >> $GITHUB_OUTPUT
          echo "meeting_title=$MEETING_TITLE" >> $GITHUB_OUTPUT
          
          echo "Has meeting this week: $HAS_MEETING"
          echo "Meeting date: $MEETING_DATE"
          echo "Meeting title: $MEETING_TITLE"

  count-rsvps:
    needs: check-upcoming-meeting
    if: needs.check-upcoming-meeting.outputs.has_meeting == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          npm install googleapis @actions/core nodemailer
      
      - name: Run RSVP count script
        id: rsvp-count
        env:
          GOOGLE_SHEETS_CREDENTIALS: ${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}
          SHEET_ID: ${{ secrets.SHEET_ID }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
        run: node .github/scripts/rsvp_count.js
      
      # Send Slack notification if email is not configured but Slack is
      - name: Send Slack notification
        if: ${{ !env.EMAIL_USER && env.SLACK_WEBHOOK_URL }}
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "good",
                  "title": "RSVP Count for ${{ needs.check-upcoming-meeting.outputs.meeting_title }} (${{ needs.check-upcoming-meeting.outputs.meeting_date }})",
                  "text": "Current RSVP count: ${{ steps.rsvp-count.outputs.rsvp_count }} unique attendees\n\nMeeting: ${{ needs.check-upcoming-meeting.outputs.meeting_title }}\nDate: ${{ needs.check-upcoming-meeting.outputs.meeting_date }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      # Fallback to GitHub issue if neither email nor Slack are configured
      - name: Create GitHub Issue with RSVP count
        if: ${{ !env.EMAIL_USER && !env.SLACK_WEBHOOK_URL }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `RSVP Count for ${process.env.MEETING_TITLE} (${process.env.MEETING_DATE})`;
            const body = `Current RSVP count: ${process.env.RSVP_COUNT} unique attendees\n\nMeeting: ${process.env.MEETING_TITLE}\nDate: ${process.env.MEETING_DATE}`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['rsvp-count']
            });
        env:
          MEETING_TITLE: ${{ needs.check-upcoming-meeting.outputs.meeting_title }}
          MEETING_DATE: ${{ needs.check-upcoming-meeting.outputs.meeting_date }}
          RSVP_COUNT: ${{ steps.rsvp-count.outputs.rsvp_count }}
